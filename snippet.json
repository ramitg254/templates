{
	// Place your snippets for java here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }

    "Template for CP": {
        "prefix": "template",
        "body": [
            "import java.util.*;",
            "import java.io.*;",
            "",
            "public class $TM_FILENAME_BASE implements Runnable {",
            "",
            "\tstatic InputReader in = new InputReader(System.in);",
            "\tstatic OutputWriter out = new OutputWriter(System.out);",
            "",
            "\tpublic static void main(String[] args) throws Exception {",
            "\t\tnew Thread(null, new Main(), \"Main\", 1 << 29).start();",
            "\t}",
            "",
            "\tpublic void run() {",
            "\t\t// For deep recursion ",
            "\t\tint t = in.nextInt();",
            "\t\twhile (t-- > 0) {",
            "\t\t\tsolve();",
            "\t\t}",
            "\t}",
            "",
            "\tpublic static void solve() {",
            "\t\t$0",
            "\t\tout.flush();",
            "\t}",
            "",
            "",
            "\t// removing duplicates",
            "\tpublic static ArrayList<Long> removeDuplicates(ArrayList<Long> list) {",
            "\t\tSet<Long> set = new HashSet<>();",
            "\t\tset.addAll(list);",
            "\t\tlist.clear();",
            "\t\tlist.addAll(set);",
            "\t\tCollections.sort(list);",
            "\t\treturn list;",
            "\t}",
            "",
            "\t// swap",
            "\tpublic static long[] swap(long a,long b){return new long[]{b,a};};",
            "",
            "\t// Pair class",
            "\tstatic class Pair<F, S> {",
            "\t\tF f;",
            "\t\tS s;",
            "",
            "\t\tpublic Pair(F first, S second) {",
            "\t\t\tthis.f = first;",
            "\t\t\tthis.s = second;",
            "\t\t}",
            "",
            "\t}",
            "",
            "\t// output writer class",
            "\tstatic class OutputWriter {",
            "\t\tprivate final PrintWriter writer;",
            "",
            "\t\tpublic OutputWriter(OutputStream outputStream) {",
            "\t\t\twriter = new PrintWriter(new BufferedWriter(new OutputStreamWriter(outputStream)));",
            "\t\t}",
            "",
            "\t\tpublic OutputWriter(Writer writer) {",
            "\t\t\tthis.writer = new PrintWriter(writer);",
            "\t\t}",
            "",
            "\t\tpublic void print(Object... objects) {",
            "\t\t\tfor (int i = 0; i < objects.length; i++) {",
            "\t\t\t\tif (i != 0) {",
            "\t\t\t\t\twriter.print(' ');",
            "\t\t\t\t}",
            "\t\t\t\twriter.print(objects[i]);",
            "\t\t\t}",
            "\t\t}",
            "",
            "\t\tpublic void println(Object... objects) {",
            "\t\t\tprint(objects);",
            "\t\t\twriter.println();",
            "\t\t}",
            "",
            "\t\tpublic void println() {",
            "\t\t\twriter.println();",
            "\t\t}",
            "",
            "\t\tpublic void print(int[] array) {",
            "\t\t\tfor (int i = 0; i < array.length; i++) {",
            "\t\t\t\tif (i != 0) {",
            "\t\t\t\t\twriter.print(' ');",
            "\t\t\t\t}",
            "\t\t\t\twriter.print(array[i]);",
            "\t\t\t}",
            "\t\t}",
            "",
            "\t\tpublic void println(int[] array) {",
            "\t\t\tprint(array);",
            "\t\t\twriter.println();",
            "\t\t}",
            "",
            "\t\tpublic void print(long[] array) {",
            "\t\t\tfor (int i = 0; i < array.length; i++) {",
            "\t\t\t\tif (i != 0) {",
            "\t\t\t\t\twriter.print(' ');",
            "\t\t\t\t}",
            "\t\t\t\twriter.print(array[i]);",
            "\t\t\t}",
            "\t\t}",
            "",
            "\t\tpublic void println(long[] array) {",
            "\t\t\tprint(array);",
            "\t\t\twriter.println();",
            "\t\t}",
            "",
            "\t\tpublic <T> void print(List<T> array) {",
            "\t\t\tfor (int i = 0; i < array.size(); i++) {",
            "\t\t\t\tif (i != 0) {",
            "\t\t\t\t\twriter.print(' ');",
            "\t\t\t\t}",
            "\t\t\t\twriter.print(array.get(i));",
            "\t\t\t}",
            "\t\t}",
            "",
            "\t\tpublic <T> void println(List<T> array) {",
            "\t\t\tprint(array);",
            "\t\t\twriter.println();",
            "\t\t}",
            "",
            "\t\tpublic void separateLines(int[] array) {",
            "\t\t\tfor (int i : array) {",
            "\t\t\t\tprintln(i);",
            "\t\t\t}",
            "\t\t}",
            "",
            "\t\tpublic void close() {",
            "\t\t\twriter.close();",
            "\t\t}",
            "",
            "\t\tpublic void flush() {",
            "\t\t\twriter.flush();",
            "\t\t}",
            "",
            "\t}",
            "",
            "\t// input reader class",
            "\tstatic class InputReader {",
            "\t\tprivate InputStream stream;",
            "\t\tprivate byte[] buf = new byte[1024];",
            "\t\tprivate int curChar;",
            "\t\tprivate int numChars;",
            "\t\tprivate SpaceCharFilter filter;",
            "",
            "\t\tpublic InputReader(InputStream stream) {",
            "\t\t\tthis.stream = stream;",
            "\t\t}",
            "",
            "\t\tpublic int read() {",
            "\t\t\tif (numChars == -1) {",
            "\t\t\t\tthrow new InputMismatchException();",
            "\t\t\t}",
            "\t\t\tif (curChar >= numChars) {",
            "\t\t\t\tcurChar = 0;",
            "\t\t\t\ttry {",
            "\t\t\t\t\tnumChars = stream.read(buf);",
            "\t\t\t\t} catch (IOException e) {",
            "\t\t\t\t\tthrow new InputMismatchException();",
            "\t\t\t\t}",
            "\t\t\t\tif (numChars <= 0) {",
            "\t\t\t\t\treturn -1;",
            "\t\t\t\t}",
            "\t\t\t}",
            "\t\t\treturn buf[curChar++];",
            "\t\t}",
            "",
            "\t\tpublic int peek() {",
            "\t\t\tif (numChars == -1) {",
            "\t\t\t\treturn -1;",
            "\t\t\t}",
            "\t\t\tif (curChar >= numChars) {",
            "\t\t\t\tcurChar = 0;",
            "\t\t\t\ttry {",
            "\t\t\t\t\tnumChars = stream.read(buf);",
            "\t\t\t\t} catch (IOException e) {",
            "\t\t\t\t\treturn -1;",
            "\t\t\t\t}",
            "\t\t\t\tif (numChars <= 0) {",
            "\t\t\t\t\treturn -1;",
            "\t\t\t\t}",
            "\t\t\t}",
            "\t\t\treturn buf[curChar];",
            "\t\t}",
            "",
            "\t\tpublic int nextInt() {",
            "\t\t\tint c = read();",
            "\t\t\twhile (isSpaceChar(c)) {",
            "\t\t\t\tc = read();",
            "\t\t\t}",
            "\t\t\tint sgn = 1;",
            "\t\t\tif (c == '-') {",
            "\t\t\t\tsgn = -1;",
            "\t\t\t\tc = read();",
            "\t\t\t}",
            "\t\t\tint sum = 0;",
            "\t\t\tdo {",
            "\t\t\t\tif (c < '0' || c > '9') {",
            "\t\t\t\t\tthrow new InputMismatchException();",
            "\t\t\t\t}",
            "\t\t\t\tsum *= 10;",
            "\t\t\t\tsum += c - '0';",
            "\t\t\t\tc = read();",
            "\t\t\t} while (!isSpaceChar(c));",
            "\t\t\treturn sum * sgn;",
            "\t\t}",
            "",
            "\t\tpublic long nextLong() {",
            "\t\t\tint c = read();",
            "\t\t\twhile (isSpaceChar(c)) {",
            "\t\t\t\tc = read();",
            "\t\t\t}",
            "\t\t\tint sgn = 1;",
            "\t\t\tif (c == '-') {",
            "\t\t\t\tsgn = -1;",
            "\t\t\t\tc = read();",
            "\t\t\t}",
            "\t\t\tlong sum = 0;",
            "\t\t\tdo {",
            "\t\t\t\tif (c < '0' || c > '9') {",
            "\t\t\t\t\tthrow new InputMismatchException();",
            "\t\t\t\t}",
            "\t\t\t\tsum *= 10;",
            "\t\t\t\tsum += c - '0';",
            "\t\t\t\tc = read();",
            "\t\t\t} while (!isSpaceChar(c));",
            "\t\t\treturn sum * sgn;",
            "\t\t}",
            "",
            "\t\tpublic String next() {",
            "\t\t\tint c = read();",
            "\t\t\twhile (isSpaceChar(c)) {",
            "\t\t\t\tc = read();",
            "\t\t\t}",
            "\t\t\tStringBuilder sum = new StringBuilder();",
            "\t\t\tdo {",
            "\t\t\t\tif (Character.isValidCodePoint(c)) {",
            "\t\t\t\t\tsum.appendCodePoint(c);",
            "\t\t\t\t}",
            "\t\t\t\tc = read();",
            "\t\t\t} while (!isSpaceChar(c));",
            "\t\t\treturn sum.toString();",
            "\t\t}",
            "",
            "\t\tpublic boolean isSpaceChar(int c) {",
            "\t\t\tif (filter != null) {",
            "\t\t\t\treturn filter.isSpaceChar(c);",
            "\t\t\t}",
            "\t\t\treturn isWhitespace(c);",
            "\t\t}",
            "",
            "\t\tpublic static boolean isWhitespace(int c) {",
            "\t\t\treturn c == ' ' || c == '\\n' || c == '\\r' || c == '\\t' || c == -1;",
            "\t\t}",
            "",
            "\t\tprivate String readLine0() {",
            "\t\t\tStringBuilder buf = new StringBuilder();",
            "\t\t\tint c = read();",
            "\t\t\twhile (c != '\\n' && c != -1) {",
            "\t\t\t\tif (c != '\\r') {",
            "\t\t\t\t\tbuf.appendCodePoint(c);",
            "\t\t\t\t}",
            "\t\t\t\tc = read();",
            "\t\t\t}",
            "\t\t\treturn buf.toString();",
            "\t\t}",
            "",
            "\t\tpublic String readLine() {",
            "\t\t\tString s = readLine0();",
            "\t\t\twhile (s.trim().length() == 0) {",
            "\t\t\t\ts = readLine0();",
            "\t\t\t}",
            "\t\t\treturn s;",
            "\t\t}",
            "",
            "\t\tpublic String readLine(boolean ignoreEmptyLines) {",
            "\t\t\tif (ignoreEmptyLines) {",
            "\t\t\t\treturn readLine();",
            "\t\t\t} else {",
            "\t\t\t\treturn readLine0();",
            "\t\t\t}",
            "\t\t}",
            "",
            "\t\tpublic String nextLine() {",
            "\t\t\treturn readLine();",
            "\t\t}",
            "",
            "\t\tpublic char nextCharacter() {",
            "\t\t\tint c = read();",
            "\t\t\twhile (isSpaceChar(c)) {",
            "\t\t\t\tc = read();",
            "\t\t\t}",
            "\t\t\treturn (char) c;",
            "\t\t}",
            "",
            "\t\tpublic double nextDouble() {",
            "\t\t\tint c = read();",
            "\t\t\twhile (isSpaceChar(c)) {",
            "\t\t\t\tc = read();",
            "\t\t\t}",
            "\t\t\tint sgn = 1;",
            "\t\t\tif (c == '-') {",
            "\t\t\t\tsgn = -1;",
            "\t\t\t\tc = read();",
            "\t\t\t}",
            "\t\t\tdouble sum = 0;",
            "\t\t\twhile (!isSpaceChar(c) && c != '.') {",
            "\t\t\t\tif (c == 'e' || c == 'E') {",
            "\t\t\t\t\treturn sum * Math.pow(10, nextInt());",
            "\t\t\t\t}",
            "\t\t\t\tif (c < '0' || c > '9') {",
            "\t\t\t\t\tthrow new InputMismatchException();",
            "\t\t\t\t}",
            "\t\t\t\tsum *= 10;",
            "\t\t\t\tsum += c - '0';",
            "\t\t\t\tc = read();",
            "\t\t\t}",
            "\t\t\tif (c == '.') {",
            "\t\t\t\tc = read();",
            "\t\t\t\tdouble m = 1;",
            "\t\t\t\twhile (!isSpaceChar(c)) {",
            "\t\t\t\t\tif (c == 'e' || c == 'E') {",
            "\t\t\t\t\t\treturn sum * Math.pow(10, nextInt());",
            "\t\t\t\t\t}",
            "\t\t\t\t\tif (c < '0' || c > '9') {",
            "\t\t\t\t\t\tthrow new InputMismatchException();",
            "\t\t\t\t\t}",
            "\t\t\t\t\tm /= 10;",
            "\t\t\t\t\tsum += (c - '0') * m;",
            "\t\t\t\t\tc = read();",
            "\t\t\t\t}",
            "\t\t\t}",
            "\t\t\treturn sum * sgn;",
            "\t\t}",
            "",
            "\t\tpublic boolean isExhausted() {",
            "\t\t\tint value;",
            "\t\t\twhile (isSpaceChar(value = peek()) && value != -1) {",
            "\t\t\t\tread();",
            "\t\t\t}",
            "\t\t\treturn value == -1;",
            "\t\t}",
            "",
            "\t\tpublic SpaceCharFilter getFilter() {",
            "\t\t\treturn filter;",
            "\t\t}",
            "",
            "\t\tpublic void setFilter(SpaceCharFilter filter) {",
            "\t\t\tthis.filter = filter;",
            "\t\t}",
            "",
            "\t\tpublic interface SpaceCharFilter {",
            "\t\t\tpublic boolean isSpaceChar(int ch);",
            "\t\t}",
            "",
            "\t\tpublic int[] nextIntArray(int n) {",
            "\t\t\tint[] array = new int[n];",
            "\t\t\tfor (int i = 0; i < n; ++i)",
            "\t\t\t\tarray[i] = nextInt();",
            "\t\t\treturn array;",
            "\t\t}",
            "",
            "\t\tpublic int[] nextSortedIntArray(int n) {",
            "\t\t\tint array[] = nextIntArray(n);",
            "\t\t\tArrays.sort(array);",
            "\t\t\treturn array;",
            "\t\t}",
            "",
            "\t\tpublic int[] nextSumIntArray(int n) {",
            "\t\t\tint[] array = new int[n];",
            "\t\t\tarray[0] = nextInt();",
            "\t\t\tfor (int i = 1; i < n; ++i)",
            "\t\t\t\tarray[i] = array[i - 1] + nextInt();",
            "\t\t\treturn array;",
            "\t\t}",
            "",
            "\t\tpublic long[] nextLongArray(int n) {",
            "\t\t\tlong[] array = new long[n];",
            "\t\t\tfor (int i = 0; i < n; ++i)",
            "\t\t\t\tarray[i] = nextLong();",
            "\t\t\treturn array;",
            "\t\t}",
            "",
            "\t\tpublic long[] nextSumLongArray(int n) {",
            "\t\t\tlong[] array = new long[n];",
            "\t\t\tarray[0] = nextInt();",
            "\t\t\tfor (int i = 1; i < n; ++i)",
            "\t\t\t\tarray[i] = array[i - 1] + nextInt();",
            "\t\t\treturn array;",
            "\t\t}",
            "",
            "\t\tpublic long[] nextSortedLongArray(int n) {",
            "\t\t\tlong array[] = nextLongArray(n);",
            "\t\t\tArrays.sort(array);",
            "\t\t\treturn array;",
            "\t\t}",
            "",
            "\t}",
            "}",
            ""
        ]
    },

	"Template for CP2" : {
        "prefix": "template2",
        "body":[
            "import java.util.*;",
            "import java.io.*;",
            
            "public class $TM_FILENAME_BASE {",
            "    $LINE_COMMENT For fast input output",
            "   static class FastReader {",
            "        BufferedReader br;",
            "        StringTokenizer st;",
            
            "        public FastReader()",
            "        { try {br = new BufferedReader(",
            "            new FileReader(\"input.txt\"));",
            "            PrintStream out = new PrintStream(new FileOutputStream(\"output.txt\"));",
            "            System.setOut(out);}",
            "        catch(Exception e) { br = new BufferedReader(new InputStreamReader(System.in));}",
            "        }",
             
            "        String next()",
            "        {",
            "            while (st == null || !st.hasMoreElements()) {",
            "                try {st = new StringTokenizer(br.readLine());}",
            "                catch (IOException e) {",
            "                    e.printStackTrace();}",
            "            }",
            "            return st.nextToken();",
            "        }",
            
            "        int nextInt() { return Integer.parseInt(next()); }",         
            "        long nextLong() { return Long.parseLong(next()); }",         
            "        double nextDouble() {return Double.parseDouble(next()); }",
            
            "        String nextLine()",
            "        {",
            "            String str = \"\";",
            "            try {",
            "            str = br.readLine();",
            "            }",
            "            catch (IOException e) {",
            "                e.printStackTrace();",
            "            }",
            "            return str;",
            "        }",
            "    }",
                
            "    $LINE_COMMENT end of fast i/o code",
            
            "    static FastReader in = new FastReader();",
            "    public static void main(String[] args) {",
                    
            "        int t=in.nextInt();",
            "        while(t-->0){",
            "            solve();",
            "        }",
            "    }",
            "    public static void solve(){",
            "        $0", 
            "    }",
            "    public static ArrayList<Long> removeDuplicates(ArrayList<Long> list){",
            "        Set<Long> set = new HashSet<>();",
            "        set.addAll(list);",
            "        list.clear();",
            "        list.addAll(set);",
            "        Collections.sort(list);",
            "        return list;",
            "}",
        "}"
        ],
        "description": "template for cp in java"
    },

    "For loop":{
        "prefix" : "fori",
        "body" : [
            "for(int i = 0; i < $0; i++)"
        ]
    },
    "outputwriter print":{
        "prefix" : "ou",
        "body" : [
            "out.println();"
        ]
    },
}

