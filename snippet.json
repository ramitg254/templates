{
	// Place your snippets for java here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"Template for CP" : {
        "prefix": "template",
        "body":[
            "import java.util.*;",
            "import java.io.*;",
            
            "public class $TM_FILENAME_BASE {",
            "    $LINE_COMMENT For fast input output",
            "   static class FastReader {",
            "        BufferedReader br;",
            "        StringTokenizer st;",
            
            "        public FastReader()",
            "        { try {br = new BufferedReader(",
            "            new FileReader(\"input.txt\"));",
            "            PrintStream out = new PrintStream(new FileOutputStream(\"output.txt\"));",
            "            System.setOut(out);}",
            "        catch(Exception e) { br = new BufferedReader(new InputStreamReader(System.in));}",
            "        }",
             
            "        String next()",
            "        {",
            "            while (st == null || !st.hasMoreElements()) {",
            "                try {st = new StringTokenizer(br.readLine());}",
            "                catch (IOException e) {",
            "                    e.printStackTrace();}",
            "            }",
            "            return st.nextToken();",
            "        }",
            
            "        int nextInt() { return Integer.parseInt(next()); }",         
            "        long nextLong() { return Long.parseLong(next()); }",         
            "        double nextDouble() {return Double.parseDouble(next()); }",
            
            "        String nextLine()",
            "        {",
            "            String str = \"\";",
            "            try {",
            "            str = br.readLine();",
            "            }",
            "            catch (IOException e) {",
            "                e.printStackTrace();",
            "            }",
            "            return str;",
            "        }",
            "    }",
                
            "    $LINE_COMMENT end of fast i/o code",
            
            "    static FastReader in = new FastReader();",
            "    public static void main(String[] args) {",
                    
            "        int t=in.nextInt();",
            "        while(t-->0){",
            "            solve();",
            "        }",
            "    }",
            "    public static void solve(){",
            "        $0", 
            "    }",
            "    public static ArrayList<Long> removeDuplicates(ArrayList<Long> list){",
            "        Set<Long> set = new HashSet<>();",
            "        set.addAll(list);",
            "        list.clear();",
            "        list.addAll(set);",
            "        Collections.sort(list);",
            "        return list;",
            "}",
        "}"
        ],
        "description": "template for cp in java"
    },

    "For loop":{
        "prefix" : "fori",
        "body" : [
            "for(int i = 0; i < $0; i++)"
        ]
    } 
}
